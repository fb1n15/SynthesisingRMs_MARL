Semantics=SingleAssignment;

Agent Environment
	Vars:
		rendezvous: boolean;
		goal_1_reached: boolean;
		goal_2_reached: boolean;
		charged: boolean;
	end Vars
	Actions = { };
	Protocol:
	end Protocol
	Evolution:
		rendezvous=true	if ( Agent0.Action = rendezvous and Agent1.Action = rendezvous and Agent2.Action = recharge ) or ( Agent0.Action = rendezvous and Agent1.Action = rendezvous and Agent2.Action = nil );
		goal_1_reached=true	if ( Agent0.Action = goal_1 and Agent1.Action = goal_2 and Agent2.Action = recharge ) or ( Agent0.Action = goal_1 and Agent1.Action = goal_2 and Agent2.Action = nil );
		goal_2_reached=true	if ( Agent0.Action = goal_1 and Agent1.Action = goal_2 and Agent2.Action = recharge ) or ( Agent0.Action = goal_1 and Agent1.Action = goal_2 and Agent2.Action = nil );
		charged=true	if ( Agent0.Action = rendezvous and Agent1.Action = rendezvous and Agent2.Action = recharge ) or ( Agent0.Action = goal_1 and Agent1.Action = goal_2 and Agent2.Action = recharge );
		charged=false	if ( charged = true and !( Agent2.Action = recharge ) );
	end Evolution
end Agent

Agent Agent0
	Lobsvars = { rendezvous, goal_1_reached, goal_2_reached, charged };
	Vars:
		agent_dummy: boolean;
	end Vars
	Actions = { rendezvous, goal_1 };
	Protocol:
		Environment.rendezvous = false:	{ rendezvous };
		Environment.rendezvous = true:	{ goal_1 };
	end Protocol
	Evolution:
		agent_dummy = true	if agent_dummy = true;
		agent_dummy = false	if agent_dummy = false;
	end Evolution
end Agent

Agent Agent1
	Lobsvars = { rendezvous, goal_1_reached, goal_2_reached, charged };
	Vars:
		agent_dummy: boolean;
	end Vars
	Actions = { rendezvous, goal_2 };
	Protocol:
		Environment.rendezvous = false:	{ rendezvous };
		Environment.rendezvous = true:	{ goal_2 };
	end Protocol
	Evolution:
		agent_dummy = true	if agent_dummy = true;
		agent_dummy = false	if agent_dummy = false;
	end Evolution
end Agent

Agent Agent2
	Lobsvars = { rendezvous, goal_1_reached, goal_2_reached, charged };
	Vars:
		agent_dummy: boolean;
	end Vars
	Actions = { recharge, nil };
	Protocol:
		agent_dummy = true or agent_dummy = false:	{ recharge };
		agent_dummy = true or agent_dummy = false:	{ nil };
	end Protocol
	Evolution:
		agent_dummy = true	if agent_dummy = true;
		agent_dummy = false	if agent_dummy = false;
	end Evolution
end Agent

Evaluation
	charged if Environment.charged = true;
	goal_1_reached if Environment.goal_1_reached = true;
	goal_2_reached if Environment.goal_2_reached = true;
end Evaluation

InitStates
	Environment.rendezvous = false and Environment.goal_1_reached = false and Environment.goal_2_reached = false and Environment.charged = true and
	Agent0.agent_dummy = false and
	Agent1.agent_dummy = false and
	Agent2.agent_dummy = false;
end InitStates

Groups
	gA = { Agent0, Agent1, Agent2 };
end Groups

Formulae
	<gA> ( charged U ( goal_1_reached and goal_2_reached ) ) ;
end Formulae