Semantics=SingleAssignment;  -- only one assignment is allowed in each evolution line.

Agent Environment
	Vars:  -- variables of the state of the environment
		goal_reached: boolean;  -- goal_reached is a variable of the environment
		green_pressed: boolean;  -- green button is pressed
		red_pressed: boolean;  -- red button is pressed
		yellow_pressed: boolean;  -- yellow button is pressed
	end Vars
	Actions = { };  -- no actions of the environment
	Protocol:
	end Protocol
	Evolution:
		goal_reached=true	if ( Agent0.Action = to_goal and Agent1.Action = press_green and Agent2.Action = nil ) or ( Agent0.Action = to_goal and Agent1.Action = press_red and Agent2.Action = press_red ) or ( Agent0.Action = to_goal and Agent1.Action = nil and Agent2.Action = nil ) or ( goal_reached = true and Agent0.Action = nil and Agent1.Action = nil and Agent2.Action = nil );
		green_pressed=true	if ( Agent0.Action = press_yellow and Agent1.Action = press_green and Agent2.Action = nil ) or ( Agent0.Action = to_goal and Agent1.Action = press_green and Agent2.Action = nil ) or ( Agent0.Action = nil and Agent1.Action = press_green and Agent2.Action = nil ) or ( green_pressed = true and Agent0.Action = nil and Agent1.Action = nil and Agent2.Action = nil );
		red_pressed=true	if ( Agent0.Action = press_yellow and Agent1.Action = press_red and Agent2.Action = press_red ) or ( Agent0.Action = to_goal and Agent1.Action = press_red and Agent2.Action = press_red ) or ( Agent0.Action = nil and Agent1.Action = press_red and Agent2.Action = press_red ) or ( red_pressed = true and Agent0.Action = nil and Agent1.Action = nil and Agent2.Action = nil );
		yellow_pressed=true	if ( Agent0.Action = press_yellow and Agent1.Action = press_green and Agent2.Action = nil ) or ( Agent0.Action = press_yellow and Agent1.Action = press_red and Agent2.Action = press_red ) or ( Agent0.Action = press_yellow and Agent1.Action = nil and Agent2.Action = nil ) or ( yellow_pressed = true and Agent0.Action = nil and Agent1.Action = nil and Agent2.Action = nil );
	end Evolution
end Agent

Agent Agent0 -- agent A1
	Lobsvars = { goal_reached, red_pressed, yellow_pressed }; -- local observable variables of the agent
	Vars:
		agent_dummy: boolean;  -- local variables are private to the agent
	end Vars
	Actions = { press_yellow, to_goal, nil }; -- press the yellow button, go to the goal, do nothing
	Protocol:
		Environment.yellow_pressed = false:	{ press_yellow };
		Environment.red_pressed = true and Environment.goal_reached = false:	{ to_goal };
		agent_dummy = true or agent_dummy = false:	{ nil };
	end Protocol
	Evolution:
	```
	    In MCMAS, for an agent definition to be valid, each of the Vars, Actions, Protocol and Evolution sections must be present and non-empty (see Section 3.1 of the ispl tutorial). If all the variables needed to model a system are “really” in the environment, this means you have add a dummy variable in its Vars section to give the agent a local state, and a rule in the Evolution section saying how that local variable evolves.

If the dummy variable is initialised to, e.g., “true” in the initial state, then Giovanni’s example can be simplified to:

Evolution:
        agent_dummy = true if agent_dummy = true;
end Evolution

since the dummy variable can never become false.

— Brian
    ```
		agent_dummy = true	if agent_dummy = true;
		agent_dummy = false	if agent_dummy = false;
	end Evolution
end Agent

Agent Agent1 -- agent A2
	Lobsvars = { green_pressed, red_pressed, yellow_pressed };
	Vars:
		agent_dummy: boolean;
	end Vars
	Actions = { press_green, press_red, nil };
	Protocol:
		Environment.yellow_pressed = true and Environment.green_pressed = false:	{ press_green };
		Environment.green_pressed = true and Environment.red_pressed = false:	{ press_red };
		agent_dummy = true or agent_dummy = false:	{ nil };
	end Protocol
	Evolution:
		agent_dummy = true	if agent_dummy = true;
		agent_dummy = false	if agent_dummy = false;
	end Evolution
end Agent

Agent Agent2 -- agent A3
	Lobsvars = { green_pressed, red_pressed };
	Vars:
		agent_dummy: boolean;
	end Vars
	Actions = { press_red, nil };
	Protocol:
		Environment.green_pressed = true and Environment.red_pressed = false:	{ press_red };
		agent_dummy = true or agent_dummy = false:	{ nil };
	end Protocol
	Evolution:
		agent_dummy = true	if agent_dummy = true;
		agent_dummy = false	if agent_dummy = false;
	end Evolution
end Agent

Evaluation 
	goal_reached if Environment.goal_reached = true;
end Evaluation

InitStates
	Environment.goal_reached = false and Environment.green_pressed = false and Environment.red_pressed = false and Environment.yellow_pressed = false and
	Agent0.agent_dummy = false and
	Agent1.agent_dummy = false and
	Agent2.agent_dummy = false;
end InitStates

Groups
	gA = { Agent0, Agent1, Agent2 };
end Groups

Formulae
	<gA> F ( goal_reached );  
end Formulae